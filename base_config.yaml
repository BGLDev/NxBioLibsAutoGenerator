#PROYECT_ORIGIN_PATH: /home/benat/Personal/01 - BIOLAN Proyects/01 - Biolan global/02_biolan_monorepo_front
PROYECT_ORIGIN_PATH: ./__Result
SCOPE: Biolanglobal
USER_TYPE: Internal
DJANGO_MODEL_NAME: Helpdesk
DJANGO_MODEL_EXTENDS: BaseModel
DJANGO_MODEL_PARAMS:
   code : models.CharField(editable:True, max_length:7, null:False, default:"COD0000")
   name : models.CharField(max_length:100)
   description : models.TextField(blank:True)
   email_recipients : models.TextField(null:True, blank:True)
   opened_timestamp : models.DateTimeField(null:True)
   resolved_timestamp : models.DateTimeField(null:True)  # timestamp de ticket resuleto
   started_timestamp : models.DateTimeField(null:True)  # timestamp de ticket asignado
   closed_timestamp : models.DateTimeField(null:True)  # timestamp de ticket cerrado
   user : models.ForeignKey(User, on_delete:models.RESTRICT, null:True)
   creator_location : models.ForeignKey(Location, on_delete:models.SET_NULL, max_length:150, null:True)
   origin_plant : models.ForeignKey(Plant, on_delete:models.RESTRICT, null:True, blank:True)
   departments : models.ManyToManyField(Department, through:"TicketDepartment", through_fields:("ticket", "department"),related_name:"tickets")
   priority : models.BooleanField(default:False)
   state : models.CharField(max_length:50, choices:State.choices, default:State.PENDING)
   ticket_type : models.CharField(max_length:50, choices:TicketType.choices)
   #classification : models.ForeignKey(TicketClassification, max_length:50, null:True, on_delete:models.RESTRICT)
   additional_info : models.TextField(null:True, blank:True)
   biotest : models.CharField(max_length:20, null:True, blank:True)
   r_calibration : models.FloatField(null:True, blank:True)
   m_calibration : models.FloatField(null:True, blank:True)
   app_version : models.CharField(max_length:20, null:True, blank:True)
  ## serial_number : models.CharField(max_length:20, null:True, blank:True)
   commercial_department : models.ForeignKey(Department, on_delete:models.RESTRICT, null:True, related_name:"co_de_rel")
   cause : models.TextField(null:True, blank:True)
   cause_types : models.ManyToManyField(CauseType,blank:True,related_name:"causes",through:"TicketCauseType",through_fields:("ticket", "cause_type"))
   solution : models.TextField(null:True, blank:True)
   has_customer_validated : models.CharField(max_length:50, choices:ValidationState.choices, default:ValidationState.PENDING)
   spare_parts : models.TextField(null:True, blank:True)
   non_compliance : models.CharField(max_length:50, null:True, blank:True)
   #category : models.ForeignKey(TicketCategory, max_length:50, null:True, on_delete:models.RESTRICT)
   #subcategory : models.ForeignKey(TicketSubcategory, max_length:50, null:True, on_delete:models.RESTRICT)
   is_internal : models.BooleanField(default:False)
   image : models.ImageField(null:True)